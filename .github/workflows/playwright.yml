name: Run Playwright Automation Tests

on:
  workflow_dispatch:  # Trigger workflow manually using the 'Run workflow' button

jobs:
  run-ui-tests:
    name: Run Playwright UI Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies for UI Tests
        working-directory: ./ui
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./ui
        run: npx playwright install --with-deps

      - name: Install Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set JAVA_HOME Environment Variable
        run: |
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
          echo "JAVA_HOME is set to: $JAVA_HOME"

      - name: Download and Extract Allure
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.tgz -O allure-2.32.0.tgz
          tar -zxvf allure-2.32.0.tgz
          sudo mv allure-2.32.0 /opt/allure
          echo "/opt/allure/bin" >> $GITHUB_PATH

      - name: Run Playwright UI Tests
        working-directory: ./ui
        run: npx cucumber-js test --format progress --format json:allure-results/results.json
        continue-on-error: true

      - name: Generate Allure Report
        working-directory: ./ui
        run: allure generate allure-results --clean

      - name: Upload Allure UI Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-report
          path: ./ui/allure-report
          expire-in: 14d  # Set expiration time for the artifact

  run-api-tests:
    name: Run API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create Server Directory
        run: mkdir -p server

      - name: Download JAR File from Cloud
        run: |
          wget --output-document=server/demo-0.0.1-SNAPSHOT.jar "https://firebasestorage.googleapis.com/v0/b/flashmart-c51b3.appspot.com/o/demo-0.0.1-SNAPSHOT.jar?alt=media&token=df7721d4-e5fd-416a-9a26-a550bf1d0a53"

      - name: Start the JAR File
        run: |
          nohup java -jar server/demo-0.0.1-SNAPSHOT.jar > server.log 2>&1 &
          echo "Waiting for the server to start..."
          until curl --silent --head http://localhost:7081/api/books; do
            echo "Server not ready yet. Retrying in 2 seconds..."
            sleep 2
          done
          echo "Server is up and running."

      - name: Upload Server Log for Debugging
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: server-log
          path: server.log


      - name: Install Node.js and Dependencies for API Tests
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies for API Tests
        working-directory: ./api
        run: npm ci

      - name: Run Playwright API Tests
        working-directory: ./api
        run: npx cucumber-js test --format progress --format json:allure-results/results.json
        continue-on-error: true

      - name: Generate Allure Report
        working-directory: ./api
        run: allure generate allure-results --clean

      - name: Upload Playwright Allure Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-test-report
          path: ./api/allure-results  # Download the whole report directory
          expire-in: 14d  # Set expiration time for the artifact

      - name: Stop the Server
        run: |
          pkill -f 'java -jar server/demo-0.0.1-SNAPSHOT.jar'
          

  clear-gh-pages:
    name: Clear GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - run-ui-tests
      - run-api-tests

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Create an empty directory
      - name: Create Empty Directory
        run: mkdir empty-dir

      # Step 3: Deploy Empty Directory to GitHub Pages
      - name: Clear GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: empty-dir  # Deploy the empty directory to clear existing files
          keep_files: false       # Ensure all files are removed


  deploy-reports:
    name: Deploy Allure Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: clear-gh-pages  # Ensure dependencies are met

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Download UI report artifact
      - name: Download UI Report Artifact
        uses: actions/download-artifact@v3
        with:
          name: ui-test-report  # Name of the UI test artifact
          path: ./ui/allure-report  # Path to extract the UI report

      # Step 3: Download API report artifact
      - name: Download API Report Artifact
        uses: actions/download-artifact@v3
        with:
          name: api-test-report  # Name of the API test artifact
          path: ./api/allure-report  # Path to extract the API report

      # Step 4: Deploy Allure Reports to GitHub Pages
      - name: Deploy Allure Reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./  # Root directory for GitHub Pages deployment
          keep_files: true # Retain other files while deploying

      # Step 5: Structure the deployed directories
      - name: Organize Deployed Reports
        run: |
          mkdir -p ./ui-report ./api-report
          mv ./ui/allure-report/* ./ui-report/
          mv ./api/allure-report/* ./api-report/
          echo "UI and API reports are organized under respective directories"
